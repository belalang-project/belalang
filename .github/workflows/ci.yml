name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Use nightly toolchain
      run: rustup update nightly && rustup default nightly
    - name: Install nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest
    - name: Run tests with nextest
      run: cargo nextest run --workspace --all-features

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Use nightly toolchain
      run: rustup update nightly && rustup default nightly
    - name: Build release
      run: cargo build --release --workspace

  flake-check:
    strategy:
      matrix:
        # omit `workspace-test` and `workspace-build` as that is already covered
        checks: [treefmt, workspace-clippy]
        target: [x86_64-linux]

    name: nix flake check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v17
    - name: nix flake check
      run: nix build .#checks.${{ matrix.target }}.${{ matrix.checks }} -L

  flake-build:
    strategy:
      matrix:
        target: [x86_64-linux]

    name: Build Nix package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v17
    - name: Nix Build
      run: nix build .#packages.${{ matrix.target }}.default -L
